type: edu
files:
- name: src/metro/Main.java
  visible: true
  text: |
    package metro;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;

    public class Tests extends StageTest<String> {
        // test from the previous stage with one line
        @DynamicTest(order = 1)
        CheckResult oneLineTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/baltimore.json");
            String output = main.execute("/output \"SubwayLink\"").trim();

            String[] stations = new String[]{"Owings Mills", "Old Court", "Milford Mill", "Reiserstown Plaza",
                "Rogers Avenue", "West Cold Spring", "Mondawmin", "Penn North", "Uptown", "State Center",
                "Lexington Market", "Charles Center", "Shot Tower/Market Place", "Johns Hopkins Hospital"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // test of example
        @DynamicTest(order = 2)
        CheckResult multipleLineOutputTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");
            String output = main.execute("/output \"m1\"").trim();

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            output = main.execute("/output \"m2\"");

            stations = new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                "Ouchy—Olympique"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // example test pt.2 (with addition)
        @DynamicTest(order = 3)
        CheckResult additionTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");

            // added a station to the end of the line
            main.execute("/append \"m1\" \"Test station 1\"");
            String output = main.execute("/output \"m1\"");

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added another one
            main.execute("/append \"m1\" \"Test station 2\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added one station to the beginning of the line
            main.execute("/add-head \"m1\" \"Head\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // not existing file check
        @DynamicTest(order = 4)
        CheckResult nonexistingFileTest() {
            TestedProgram main = new TestedProgram();
            String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt");
            if (output.trim().length() == 0) {
                return CheckResult.wrong("The program did not print anything when the file was not exist. ");
            }
            if (output.toLowerCase().startsWith("depot") || output.toLowerCase().endsWith("depot")) {
                return CheckResult.wrong("It looks like the program did not print an error message when the file was not exist.");
            }
            return CheckResult.correct();
        }

        // test of a case from the example
        @DynamicTest(order = 5)
        CheckResult outputLineWithTransfer() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", null},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            String output = main.execute("/output \"Linka A\"");
            checkDepots(output);

            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult connectLinesTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", "Linka C"},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            main.execute("/connect \"Linka C\" \"I.P.Pavlova\" \"Linka A\" \"Petriny\"");
            String output = main.execute("/output \"Linka A\"");

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTest(order = 7)
        CheckResult simpleRouteTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] correctRoute = {"Petriny", "Nadrazi Veleslavin", "Borislavka", "Dejvicka", "Hradcanska", "Malostranska",
                "Staromestska", "Mustek", "Muzeum", "Namesti Miru", "Jiriho z Podebrad", "Flora"};

            String[] sOutput = main.execute("/route \"Linka A\" \"Petriny\" \"Linka A\" \"Flora\"").toLowerCase().split("\n");

            if (sOutput.length != correctRoute.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + correctRoute.length + " stations." +
                    "\nYour output: " + sOutput.length + " stations.");
            }

            for (int i = 0; i < correctRoute.length; i++) {
                if (i == 0 && !correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                    return CheckResult.wrong("The first station in the output should be '" + correctRoute[i] + "'.");
                } else if (i != 0) {
                    if (!correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                        return CheckResult.wrong("After '" + correctRoute[i - 1] + "' should be '" + correctRoute[i] + "'.");
                    }
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 8)
        CheckResult advancedRouteTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] stations = {"Vysehrad", "I.P.Pavlova", "Muzeum",
                "Transition to line Linka A", "Muzeum", "Mustek",
                "Transition to line Linka B", "Mustek", "Namesti Republiky"};
            String[] sOutput = main.execute("/route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"").split("\n");

            if (sOutput.length != stations.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + (stations.length - 4) + " stations and 2 transitions. Output should be " + stations.length + " lines." +
                    "\nYour output: " + sOutput.length + " lines");
            }

            for (int i = 0; i < stations.length; i++) {
                if (i == 0 && !stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                    return CheckResult.wrong("The first station in the output should be " + stations[i]);
                } else if (i != 0) {
                    if (!stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                        return CheckResult.wrong("After '" + stations[i - 1] + "' should be '" + stations[i] + "'.");
                    }
                }
            }
            return CheckResult.correct();
        }

        // checks for "depot" at the start and at the end
        void checkDepots(String output) {
            output = output.trim().toLowerCase();
            if (!output.startsWith("depot")) {
                throw new WrongAnswer("Your output should start with 'depot'.");
            } else if (!output.endsWith("depot")) {
                throw new WrongAnswer("Your output should end with 'depot'.");
            }
        }

        // checks number of stations in output
        void checkOutputLength(String output, int correctLength) {
            int length = output.trim().split("\n").length;
            if (length != correctLength) {
                throw new WrongAnswer("You output contains wrong number of lines.\n" +
                    "Expected: " + correctLength + " lines\n" +
                    "Your output: " + length + " lines");
            }
        }

        // checks stations
        void assertStations(String output, String[] stations) {

            String[] sOutput = output.trim().split("\n");

            for (int i = 0; i < stations.length; i++) {
                if (!sOutput[i + 1].equals(stations[i])) {
                    throw new WrongAnswer("Can't find station '" + stations[i] + "' in the line number " + (i + 2));
                }
            }
        }

        void assertWithTransfer(String output, String[][] stations) {

            String[] sOutput = output.split("\n");

            for (int i = 0; i < stations.length; i++) {
                String currentLine = sOutput[i + 1].toLowerCase().trim();
                String currentStation = stations[i][0];
                String currentTransfer = stations[i][1];
                if (currentTransfer == null) {
                    if (!currentLine.equals(currentStation.toLowerCase())) {
                        throw new WrongAnswer("There is an error in your program's reply. Some stations were not found.");
                    }
                } else if (!currentLine.contains(currentStation.toLowerCase()) ||
                    !currentLine.contains(currentTransfer.toLowerCase())) {
                    throw new WrongAnswer("Expected transfer to '" + currentTransfer + "' from '" + currentStation + "' station.");
                }
            }
        }
    }
  learner_created: false
- name: test/prague.json
  visible: false
  text: |-
    {
      "Linka A": {
        "1": {
          "name": "Nemocnice Motol" ,
          "transfer": []
        } ,
        "2": {
          "name": "Petriny" ,
          "transfer": []
        } ,
        "3": {
          "name": "Nadrazi Veleslavin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Borislavka" ,
          "transfer": []
        } ,
        "5": {
          "name": "Dejvicka" ,
          "transfer": []
        } ,
        "6": {
          "name": "Hradcanska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Malostranska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Staromestska" ,
          "transfer": []
        } ,
        "9": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Miru" ,
          "transfer": []
        } ,
        "12": {
          "name": "Jiriho z Podebrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Flora" ,
          "transfer": []
        } ,
        "14": {
          "name": "Zelivskeho" ,
          "transfer": []
        } ,
        "15": {
          "name": "Strasnicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Skalka" ,
          "transfer": []
        } ,
        "17": {
          "name": "Depo Hostivar" ,
          "transfer": []
        }
      } ,
      "Linka B": {
        "1": {
          "name": "Cerny Most" ,
          "transfer": []
        } ,
        "2": {
          "name": "Rajska zahrada" ,
          "transfer": []
        } ,
        "3": {
          "name": "Hloubetin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Kolbenova" ,
          "transfer": []
        } ,
        "5": {
          "name": "Vysocanska" ,
          "transfer": []
        } ,
        "6": {
          "name": "Ceskomoravska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Palmovka" ,
          "transfer": []
        } ,
        "8": {
          "name": "Invalidovna" ,
          "transfer": []
        } ,
        "9": {
          "name": "Krizikova" ,
          "transfer": []
        } ,
        "10": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Florenc"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Republiky" ,
          "transfer": []
        } ,
        "12": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka A" ,
              "station": "Mustek"
            }
          ]
        } ,
        "13": {
          "name": "Narodni trida" ,
          "transfer": []
        } ,
        "14": {
          "name": "Karlovo namesti" ,
          "transfer": []
        } ,
        "15": {
          "name": "Andel" ,
          "transfer": []
        } ,
        "16": {
          "name": "Smichovske nadrazi" ,
          "transfer": []
        } ,
        "17": {
          "name": "Radlicka" ,
          "transfer": []
        } ,
        "18": {
          "name": "Jinonice" ,
          "transfer": []
        } ,
        "19": {
          "name": "Nove Butovice" ,
          "transfer": []
        } ,
        "20": {
          "name": "Hurka" ,
          "transfer": []
        } ,
        "21": {
          "name": "Luziny" ,
          "transfer": []
        } ,
        "22": {
          "name": "Luka" ,
          "transfer": []
        } ,
        "23": {
          "name": "Stodulky" ,
          "transfer": []
        } ,
        "24": {
          "name": "Zlicin" ,
          "transfer": []
        }
      } ,
      "Linka C": {
        "1": {
          "name": "Letnany" ,
          "transfer": []
        } ,
        "2": {
          "name": "Prosek" ,
          "transfer": []
        } ,
        "3": {
          "name": "Strizkov" ,
          "transfer": []
        } ,
        "4": {
          "name": "Ladvi" ,
          "transfer": []
        } ,
        "5": {
          "name": "Kobylisy" ,
          "transfer": []
        } ,
        "6": {
          "name": "Nadrazi Holesovice" ,
          "transfer": []
        } ,
        "7": {
          "name": "Vltavska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Florenc"
            }
          ]
        } ,
        "9": {
          "name": "Hlavni nadrazi" ,
          "transfer": []
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka A" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "I.P.Pavlova" ,
          "transfer": []
        } ,
        "12": {
          "name": "Vysehrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Prazskeho povstani" ,
          "transfer": []
        } ,
        "14": {
          "name": "Pankrac" ,
          "transfer": []
        } ,
        "15": {
          "name": "Budejovicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Kacerov" ,
          "transfer": []
        } ,
        "17": {
          "name": "Roztyly" ,
          "transfer": []
        } ,
        "18": {
          "name": "Chodov" ,
          "transfer": []
        } ,
        "19": {
          "name": "Opatov" ,
          "transfer": []
        } ,
        "20": {
          "name": "Haje" ,
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/lausanne.json
  visible: false
  text: |-
    {
      "m1": {
        "1": {
          "name": "Renes—Gare",
          "transfer": []
        },
        "2": {
          "name": "Epenex",
          "transfer": []
        },
        "3": {
          "name": "Crochy",
          "transfer": []
        },
        "4": {
          "name": "Cerisaie",
          "transfer": []
        },
        "5": {
          "name": "Bassenges",
          "transfer": []
        },
        "6": {
          "name": "EPFL",
          "transfer": []
        },
        "7": {
          "name": "UNL—Sorge",
          "transfer": []
        },
        "8": {
          "name": "Mouline",
          "transfer": []
        },
        "9": {
          "name": "UNL—Chemberonne",
          "transfer": []
        },
        "10": {
          "name": "Bourdonnette",
          "transfer": []
        },
        "11": {
          "name": "Melley",
          "transfer": []
        },
        "12": {
          "name": "Provence",
          "transfer": []
        },
        "13": {
          "name": "Montelly",
          "transfer": []
        },
        "14": {
          "name": "Vigie",
          "transfer": []
        },
        "15": {
          "name": "Lausanne—Flon",
          "transfer": []
        }
      },
      "m2": {
        "1": {
          "name": "Croisettes",
          "transfer": []
        },
        "2": {
          "name": "Vennes",
          "transfer": []
        },
        "3": {
          "name": "Fourmi",
          "transfer": []
        },
        "4": {
          "name": "Sallaz",
          "transfer": []
        },
        "5": {
          "name": "CHUV",
          "transfer": []
        },
        "6": {
          "name": "Ours",
          "transfer": []
        },
        "7": {
          "name": "Riponne M.Bejart",
          "transfer": []
        },
        "8": {
          "name": "Bessieres",
          "transfer": []
        },
        "9": {
          "name": "Lausanne—Flon",
          "transfer": []
        },
        "10": {
          "name": "Lausanne Gare CFF",
          "transfer": []
        },
        "11": {
          "name": "Grancy",
          "transfer": []
        },
        "12": {
          "name": "Delices",
          "transfer": []
        },
        "13": {
          "name": "Jourdils",
          "transfer": []
        },
        "14": {
          "name": "Ouchy—Olympique",
          "transfer": []
        }
      }
    }
  learner_created: false
- name: src/metro/ArgumentTokenizer.java
  visible: true
  text: |-
    package metro;

    import java.util.LinkedList;
    import java.util.List;

    abstract class ArgumentTokenizer {
        private static final int NO_TOKEN_STATE = 0;
        private static final int NORMAL_TOKEN_STATE = 1;
        private static final int SINGLE_QUOTE_STATE = 2;
        private static final int DOUBLE_QUOTE_STATE = 3;

        private ArgumentTokenizer() {
        }

        /**
         * Tokenizes the given String into String tokens
         *
         * @param arguments A String containing one or more command-line style arguments to be tokenized.
         * @return A list of parsed and properly escaped arguments.
         */
        public static List<String> tokenize(String arguments) {
            return tokenize(arguments, false);
        }

        /**
         * Tokenizes the given String into String tokens.
         *
         * @param arguments A String containing one or more command-line style arguments to be tokenized.
         * @param stringify whether to include escape special characters
         * @return A list of parsed and properly escaped arguments.
         */
        public static List<String> tokenize(String arguments, boolean stringify) {

            LinkedList<String> argList = new LinkedList<>();
            StringBuilder currArg = new StringBuilder();
            boolean escaped = false;
            int state = NO_TOKEN_STATE;  // start in the NO_TOKEN_STATE
            int len = arguments.length();

            // Loop over each character in the string
            for (int i = 0; i < len; i++) {
                char c = arguments.charAt(i);
                if (escaped) {
                    // Escaped state: just append the next character to the current arg.
                    escaped = false;
                    currArg.append(c);
                } else {
                    switch (state) {
                        case SINGLE_QUOTE_STATE:
                            if (c == '\'') {
                                // Seen the close quote; continue this arg until whitespace is seen
                                state = NORMAL_TOKEN_STATE;
                            } else {
                                currArg.append(c);
                            }
                            break;
                        case DOUBLE_QUOTE_STATE:
                            if (c == '"') {
                                // Seen the close quote; continue this arg until whitespace is seen
                                state = NORMAL_TOKEN_STATE;
                            } else if (c == '\\') {
                                // Look ahead, and only escape quotes or backslashes
                                i++;
                                char next = arguments.charAt(i);
                                if (next == '"' || next == '\\') {
                                    currArg.append(next);
                                } else {
                                    currArg.append(c);
                                    currArg.append(next);
                                }
                            } else {
                                currArg.append(c);
                            }
                            break;

                        case NO_TOKEN_STATE:
                        case NORMAL_TOKEN_STATE:
                            switch (c) {
                                case '\\':
                                    escaped = true;
                                    state = NORMAL_TOKEN_STATE;
                                    break;
                                case '\'':
                                    state = SINGLE_QUOTE_STATE;
                                    break;
                                case '"':
                                    state = DOUBLE_QUOTE_STATE;
                                    break;
                                default:
                                    if (!Character.isWhitespace(c)) {
                                        currArg.append(c);
                                        state = NORMAL_TOKEN_STATE;
                                    } else if (state == NORMAL_TOKEN_STATE) {
                                        // Whitespace ends the token; start a new one
                                        argList.add(currArg.toString());
                                        currArg = new StringBuilder();
                                        state = NO_TOKEN_STATE;
                                    }
                            }
                            break;
                        default:
                            throw new IllegalStateException("ArgumentTokenizer state " + state + " is invalid!");
                    }
                }
            }

            // If we're still escaped, put in the backslash
            if (escaped) {
                currArg.append('\\');
                argList.add(currArg.toString());
            }
            // Close the last argument if we haven't yet
            else if (state != NO_TOKEN_STATE) {
                argList.add(currArg.toString());
            }
            // Format each argument if we've been told to stringify them
            if (stringify) {
                for (int i = 0; i < argList.size(); i++) {
                    argList.set(i, "\"" + escapeQuotesAndBackslashes(argList.get(i)) + "\"");
                }
            }
            return argList;
        }

        /**
         * Inserts backslashes before any occurrences of a backslash or
         * quote in the given string.  Also converts any special characters
         * appropriately.
         */
        protected static String escapeQuotesAndBackslashes(String s) {
            final StringBuilder buf = new StringBuilder(s);

            // Walk backwards, looking for quotes or backslashes.
            //  If we see any, insert an extra backslash into the buffer at
            //  the same index.  (By walking backwards, the index into the buffer
            //  will remain correct as we change the buffer.)
            for (int i = s.length() - 1; i >= 0; i--) {
                char c = s.charAt(i);
                if ((c == '\\') || (c == '"')) {
                    buf.insert(i, '\\');
                }
                // Replace any special characters with escaped versions
                else if (c == '\n') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\n");
                } else if (c == '\t') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\t");
                } else if (c == '\r') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\r");
                } else if (c == '\b') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\b");
                } else if (c == '\f') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\f");
                }
            }
            return buf.toString();
        }
    }
  learner_created: true
- name: src/metro/MetroSystem.java
  visible: true
  text: |
    package metro;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;

    public class MetroSystem {
        private final ArrayList<MetroLine> lines = new ArrayList<>();

        public ArrayList<MetroLine> getLines() {
            return lines;
        }


        void appendStation(List<String> inputArgs) {

            if (containsLine(inputArgs.get(1))) {
                for (var line : lines) {
                    if (line.getName().equals(inputArgs.get(1))) {
                        line.getStations().addLast(new Station(inputArgs.get(2)));
                        break;
                    }
                }
            }
        }

        void addHeadStation(List<String> inputArgs) {
            if (containsLine(inputArgs.get(1))) {
                for (var line : lines) {
                    if (line.getName().equals(inputArgs.get(1))) {
                        line.getStations().addFirst(new Station(inputArgs.get(2)));
                        break;
                    }
                }
            }
        }

        void removeStation(List<String> inputArgs) {
            if (containsLine(inputArgs.get(1))) {
                for (var line : lines) {
                    if (line.getName().equals(inputArgs.get(1))) {
                        line.getStations().removeIf(s -> s.getName().equals(inputArgs.get(2)));
                    }
                }
            }
        }

        void outputLine(List<String> inputArgs) {
            if (containsLine(inputArgs.get(1))) {
                var line = lines.stream().filter(l -> l.getName().equals(inputArgs.get(1))).findAny();
                line.ifPresent(MetroLine::printStations);
            }
        }

        void connectStations(List<String> inputArgs) {
            if (containsLine(inputArgs.get(1)) && containsLine(inputArgs.get(3))
                    && containsStation(inputArgs.get(1), inputArgs.get(2))
                    && containsStation(inputArgs.get(3), inputArgs.get(4))) {
                Objects.requireNonNull(getLineByName(inputArgs.get(1))).getStationByName(inputArgs.get(2))
                        .getTransfer().add(new Connection(inputArgs.get(3), inputArgs.get(4)));
                Objects.requireNonNull(getLineByName(inputArgs.get(3))).getStationByName(inputArgs.get(4))
                        .getTransfer().add(new Connection(inputArgs.get(1), inputArgs.get(2)));
            }
        }

        private boolean containsStation(String line, String station) {
            for (var l : lines) {
                if (l.getName().equals(line)) {
                    for (var s : l.getStations()) {
                        if (s.getName().equals(station)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private boolean containsLine(String line) {
            return lines.stream().anyMatch(l -> l.getName().equals(line));
        }

        private MetroLine getLineByName(String line) {
            for (var l : lines) {
                if (l.getName().equals(line)) {
                    return l;
                }
            }
            return null;
        }


    }
  learner_created: true
- name: src/metro/JsonMetroParser.java
  visible: true
  text: |
    package metro;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import com.google.gson.Gson;

    import java.io.File;
    import java.io.Reader;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    public class JsonMetroParser {

        private JsonMetroParser() {
        }

        public static MetroSystem parseJsonMetroSystem(String fileName) {

            Gson gson = new Gson();
            MetroSystem metroSystem = new MetroSystem();
            File file = new File(fileName);
            if (file.exists()) {
                Path path = Paths.get(fileName);
                try (Reader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {

                    JsonElement jsonElement = JsonParser.parseReader(reader);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    for (var line : jsonObject.entrySet()) {
                        MetroLine metroLine = new MetroLine(line.getKey());
                        for (var stations : line.getValue().getAsJsonObject().keySet()) {
                            metroLine.addStation(gson.fromJson(line.getValue().getAsJsonObject().get(stations)
                                    .getAsJsonObject().toString(), Station.class));
                        }
                        metroSystem.getLines().add(metroLine);
                    }
                } catch (Exception e) {
                    System.err.println("Incorrect File");
                }
            } else {
                System.out.println("Error! Such a file doesn't exist!");
                return null;
            }
            return metroSystem;
        }
    }
  learner_created: true
- name: src/metro/MetroLine.java
  visible: true
  text: |
    package metro;

    import java.util.LinkedList;

    public class MetroLine {
        private final String name;
        private final LinkedList<Station> stations = new LinkedList<>();

        public MetroLine(String name) {
            this.name = name;
        }

        public LinkedList<Station> getStations() {
            return stations;
        }

        public String getName() {
            return name;
        }

        void printStations() {

            final String depot = "depot";
            System.out.println(depot);
            for (var station : stations) {
                System.out.println(station.toString());
            }
            System.out.println(depot);
        }

        public void addStation(Station station) {
            stations.add(station);
        }

        Station getStationByName(String station) {
            for (var s : stations) {
                if (s.getName().equals(station)) {
                    return s;
                }
            }
            return null;
        }
    }
  learner_created: true
- name: src/metro/lines.json
  visible: true
  text: |-
    {
      "Metro-Railway": {
        "3": {
          "name": "Baker street",
          "transfer": [
            {
              "line": "Hammersmith-and-City",
              "station": "Baker street"
            }
          ]
        },
        "1": {
          "name": "Bishops-road",
          "transfer": []
        },
        "2": {
          "name": "Edgver road",
          "transfer": []
        }
      },
      "Hammersmith-and-City": {
        "2": {
          "name": "Westbourne-park",
          "transfer": []
        },
        "1": {
          "name": "Hammersmith",
          "transfer": []
        },
        "3": {
          "name": "Baker street",
          "transfer": [
            {
              "line": "Metro-Railway",
              "station": "Baker street"
            }
          ]
        }
      }
    }
  learner_created: true
- name: src/metro/Station.java
  visible: true
  text: |
    package metro;

    import java.util.ArrayList;
    import java.util.Objects;

    public class Station {
        private String name;
        private ArrayList<Connection> transfer;

        public Station(String name, ArrayList<Connection> connections) {
            this.name = name;
            this.transfer = connections;
        }

        public Station(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public ArrayList<Connection> getTransfer() {
            return transfer;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setTransfer(ArrayList<Connection> transfer) {
            this.transfer = transfer;
        }

        @Override
        public String toString() {
            final String separator = " - ";
            if (Objects.isNull(transfer) || transfer.isEmpty()) {
                return name;
            } else {
                return name + separator + transfer.get(0).getStation() + "(" + transfer.get(0).getLine() + " line)";
            }
        }
    }
  learner_created: true
- name: src/metro/App.java
  visible: true
  text: |
    package metro;

    import java.util.List;
    import java.util.Scanner;

    import static metro.JsonMetroParser.parseJsonMetroSystem;

    public class App {
        private final Scanner scanner = new Scanner(System.in);
        private MetroSystem metroSystem = new MetroSystem();

        void start(String[] args) {
            if (readStationsFromJson(args[0])) {
                while (true) {
                    String input = scanner.nextLine();
                    var inputArgs = ArgumentTokenizer.tokenize(input);
                    if (!inputArgs.isEmpty()) {
                        runCommand(inputArgs);
                    }
                }
            }
        }

        private void runCommand(List<String> inputArgs) {
            if (inputArgs.contains("/append") && inputArgs.size() == 3) {
                metroSystem.appendStation(inputArgs);
            } else if (inputArgs.contains("/add-head") && inputArgs.size() == 3) {
                metroSystem.addHeadStation(inputArgs);
            } else if (inputArgs.contains("remove") && inputArgs.size() == 3) {
                metroSystem.removeStation(inputArgs);
            } else if (inputArgs.contains("/output") && inputArgs.size() == 2) {
                metroSystem.outputLine(inputArgs);
            } else if (inputArgs.contains("/connect") && inputArgs.size() == 5) {
                metroSystem.connectStations(inputArgs);
            } else if (inputArgs.contains("/exit") && inputArgs.size() == 1) {
                exit();
            } else {
                System.out.println("Invalid command");
            }
        }

        private boolean readStationsFromJson(String fileName) {
            metroSystem = parseJsonMetroSystem(fileName);
            return metroSystem != null;
        }

        private void exit() {
            System.exit(0);
        }
    }
  learner_created: true
- name: src/metro/Connection.java
  visible: true
  text: |
    package metro;

    public class Connection {
        private String line;
        private String station;

        public Connection(String line, String station) {
            this.line = line;
            this.station = station;
        }

        public String getLine() {
            return line;
        }

        public String getStation() {
            return station;
        }

        public void setLine(String line) {
            this.line = line;
        }

        public void setStation(String station) {
            this.station = station;
        }
    }
  learner_created: true
- name: src/metro/RouteFinder.java
  visible: true
  learner_created: true
- name: test/baltimore.json
  visible: false
  text: |-
    {
      "SubwayLink": {
        "1": {
          "name": "Owings Mills",
          "transfer": [],
          "time": 2
        },
        "2": {
          "name": "Old Court",
          "transfer": [],
          "time": 4
        },
        "3": {
          "name": "Milford Mill",
          "transfer": [],
          "time": 6
        },
        "4": {
          "name": "Reiserstown Plaza",
          "transfer": [],
          "time": 3
        },
        "5": {
          "name": "Rogers Avenue",
          "transfer": [],
          "time": 2
        },
        "6": {
          "name": "West Cold Spring",
          "transfer": [],
          "time": 6
        },
        "7": {
          "name": "Mondawmin",
          "transfer": [],
          "time": 4
        },
        "8": {
          "name": "Penn North",
          "transfer": [],
          "time": 5
        },
        "9": {
          "name": "Uptown",
          "transfer": [],
          "time": 7
        },
        "10": {
          "name": "State Center",
          "transfer": [],
          "time": 3
        },
        "11": {
          "name": "Lexington Market",
          "transfer": [],
          "time": 5
        },
        "12": {
          "name": "Charles Center",
          "transfer": [],
          "time": 6
        },
        "13": {
          "name": "Shot Tower/Market Place",
          "transfer": [],
          "time": 4
        },
        "14": {
          "name": "Johns Hopkins Hospital",
          "transfer": [], "time": null
        }
      }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/10344#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 07 Apr 2022 12:25:41 UTC
record: 4
